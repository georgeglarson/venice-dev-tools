sequenceDiagram
    participant App as Application
    participant VeniceAI as VeniceAI
    participant ChatAPI as ChatAPI
    participant ModelsAPI as ModelsAPI
    participant KeysAPI as KeysAPI
    participant HttpClient as HttpClient
    participant API as Venice AI API
    participant CLI as CLI
    participant ConfigMgr as ConfigManager
    participant User as User
    
    %% SDK Initialization
    App->>VeniceAI: new VeniceAI({ apiKey, ... })
    VeniceAI->>VeniceAI: initialize configuration
    VeniceAI->>HttpClient: create client instance
    VeniceAI->>VeniceAI: initialize API modules
    
    %% Chat Completion
    App->>VeniceAI: venice.chat.completions.create({ messages, model })
    VeniceAI->>ChatAPI: completions.create({ messages, model })
    ChatAPI->>HttpClient: post('/chat/completions', data)
    HttpClient->>API: POST /chat/completions
    API->>HttpClient: Return completion response
    HttpClient->>ChatAPI: Return parsed response
    ChatAPI->>VeniceAI: Return ChatCompletion object
    VeniceAI->>App: Return ChatCompletion object
    
    %% List Models
    App->>VeniceAI: venice.models.list()
    VeniceAI->>ModelsAPI: list()
    ModelsAPI->>HttpClient: get('/models')
    HttpClient->>API: GET /models
    API->>HttpClient: Return models list
    HttpClient->>ModelsAPI: Return parsed response
    ModelsAPI->>VeniceAI: Return ModelsResponse
    VeniceAI->>App: Return ModelsResponse
    
    %% CLI Chat Command
    User->>CLI: venice chat "What is AI?"
    CLI->>ConfigMgr: getApiKey()
    ConfigMgr->>CLI: Return stored API key
    CLI->>VeniceAI: new VeniceAI({ apiKey })
    CLI->>CLI: execute("What is AI?", options)
    CLI->>VeniceAI: chat.completions.create({ messages, ... })
    VeniceAI->>API: POST /chat/completions
    API->>VeniceAI: Return completion
    VeniceAI->>CLI: Return ChatCompletion
    CLI->>User: Display formatted response
    
    %% CLI List Models Command
    User->>CLI: venice list-models
    CLI->>ConfigMgr: getApiKey()
    ConfigMgr->>CLI: Return stored API key
    CLI->>VeniceAI: new VeniceAI({ apiKey })
    CLI->>CLI: execute list-models command
    CLI->>VeniceAI: models.list()
    VeniceAI->>API: GET /models
    API->>VeniceAI: Return models list
    VeniceAI->>CLI: Return ModelsResponse
    CLI->>User: Display formatted models list
    
    %% CLI List Keys Command
    User->>CLI: venice list-keys
    CLI->>ConfigMgr: listKeys()
    ConfigMgr->>CLI: Return stored API keys
    CLI->>User: Display formatted keys list