classDiagram
    class VeniceAI {
        -config: VeniceAIConfig
        -httpClient: HttpClient
        +chat: ChatAPI
        +models: ModelsAPI
        +keys: KeysAPI
        +constructor(config: VeniceAIConfig)
    }

    class VeniceAIConfig {
        +apiKey: string
        +baseURL: string
        +defaultModel: string
        +timeout: number
        +maxRetries: number
    }

    class ChatAPI {
        -client: HttpClient
        -config: VeniceAIConfig
        +completions: ChatCompletionsAPI
    }

    class ChatCompletionsAPI {
        -client: HttpClient
        -config: VeniceAIConfig
        +create(params: CreateChatCompletionParams): Promise<ChatCompletion>
        +createStream(params: CreateChatCompletionParams): AsyncIterable<ChatCompletionChunk>
    }

    class ModelsAPI {
        -client: HttpClient
        -config: VeniceAIConfig
        +list(): Promise<ModelsResponse>
        +retrieve(modelId: string): Promise<Model>
    }

    class KeysAPI {
        -client: HttpClient
        -config: VeniceAIConfig
        +list(): Promise<KeysResponse>
        +create(params: CreateKeyParams): Promise<Key>
        +revoke(keyId: string): Promise<RevokeKeyResponse>
    }

    class HttpClient {
        <<interface>>
        +get(path: string, config?: RequestConfig): Promise<Response>
        +post(path: string, data: any, config?: RequestConfig): Promise<Response>
        +delete(path: string, config?: RequestConfig): Promise<Response>
        +stream(path: string, data: any, config?: RequestConfig): AsyncIterable<any>
    }

    class NodeHttpClient {
        +get(path: string, config?: RequestConfig): Promise<Response>
        +post(path: string, data: any, config?: RequestConfig): Promise<Response>
        +delete(path: string, config?: RequestConfig): Promise<Response>
        +stream(path: string, data: any, config?: RequestConfig): AsyncIterable<any>
    }

    class BrowserHttpClient {
        +get(path: string, config?: RequestConfig): Promise<Response>
        +post(path: string, data: any, config?: RequestConfig): Promise<Response>
        +delete(path: string, config?: RequestConfig): Promise<Response>
        +stream(path: string, data: any, config?: RequestConfig): AsyncIterable<any>
    }

    class CLI {
        -sdk: VeniceAI
        -program: Command
        +constructor()
        +run(args: string[]): Promise<void>
    }

    class ConfigManager {
        +getApiKey(): Promise<string|null>
        +setApiKey(key: string, profile?: string): Promise<void>
        +listKeys(): Promise<Record<string, string>>
        +removeKey(profile: string): Promise<void>
    }

    class ChatCommand {
        -sdk: VeniceAI
        +execute(prompt: string, options: ChatOptions): Promise<void>
    }

    class ListModelsCommand {
        -sdk: VeniceAI
        +execute(options: ListModelsOptions): Promise<void>
    }

    class ListKeysCommand {
        -configManager: ConfigManager
        +execute(options: ListKeysOptions): Promise<void>
    }

    VeniceAI *-- ChatAPI
    VeniceAI *-- ModelsAPI
    VeniceAI *-- KeysAPI
    VeniceAI --> HttpClient
    ChatAPI *-- ChatCompletionsAPI
    HttpClient <|.. NodeHttpClient
    HttpClient <|.. BrowserHttpClient
    CLI o-- VeniceAI
    CLI *-- ChatCommand
    CLI *-- ListModelsCommand
    CLI *-- ListKeysCommand
    CLI o-- ConfigManager
    ChatCommand --> VeniceAI
    ListModelsCommand --> VeniceAI
    ListKeysCommand --> ConfigManager