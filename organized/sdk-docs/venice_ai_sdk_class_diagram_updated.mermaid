classDiagram
    class VeniceAI {
        -config: VeniceAIConfig
        -httpClient: HttpClient
        -registry: EndpointRegistry
        +chat: ChatAPI
        +models: ModelsAPI
        +keys: KeysAPI
        +images: ImagesAPI
        +endpoint(name: string): Endpoint
        +registerEndpoint(def: EndpointDefinition): void
        +constructor(config: VeniceAIConfig)
    }

    class VeniceAIConfig {
        +apiKey: string
        +baseURL: string
        +defaultModel: string
        +timeout: number
        +maxRetries: number
        +version: string
    }

    class EndpointRegistry {
        -endpoints: Map~string, EndpointDefinition~
        -client: HttpClient
        -config: VeniceAIConfig
        +registerEndpoint(def: EndpointDefinition): void
        +getEndpoint(name: string): Endpoint
        +listEndpoints(): EndpointDefinition[]
        +buildAPI(name: string, group: string): object
    }
    
    class EndpointDefinition {
        +name: string
        +path: string
        +method: HttpMethod
        +group: string
        +version: string
        +requestSchema: Schema
        +responseSchema: Schema
        +deprecated: boolean
        +supportsStreaming: boolean
    }
    
    class Endpoint {
        -definition: EndpointDefinition
        -client: HttpClient
        -config: VeniceAIConfig
        +call(params: any): Promise~Response~
        +stream(params: any): AsyncIterable~Chunk~
        +validate(params: any): ValidationResult
    }

    class AbstractAPI {
        <<abstract>>
        #registry: EndpointRegistry
        #client: HttpClient
        #config: VeniceAIConfig
        +constructor(registry: EndpointRegistry, client: HttpClient, config: VeniceAIConfig)
    }

    class ChatAPI {
        +completions: ChatCompletionsAPI
    }

    class ChatCompletionsAPI {
        +create(params: CreateChatCompletionParams): Promise<ChatCompletion>
        +createStream(params: CreateChatCompletionParams): AsyncIterable<ChatCompletionChunk>
    }

    class ModelsAPI {
        +list(params?: ListModelsParams): Promise<ModelsResponse>
        +retrieve(modelId: string): Promise<Model>
    }

    class KeysAPI {
        +list(): Promise<KeysResponse>
        +create(params: CreateKeyParams): Promise<Key>
        +revoke(keyId: string): Promise<RevokeKeyResponse>
    }
    
    class ImagesAPI {
        +generate(params: GenerateImageParams): Promise<GenerateImageResponse>
        +edit(params: EditImageParams): Promise<EditImageResponse>
        +variation(params: ImageVariationParams): Promise<ImageVariationResponse>
    }

    class HttpClient {
        <<interface>>
        +request(method: HttpMethod, path: string, data?: any, config?: RequestConfig): Promise<Response>
        +stream(path: string, data: any, config?: RequestConfig): AsyncIterable<any>
        +setBaseUrl(url: string): void
        +setDefaultHeaders(headers: Record<string, string>): void
        +setTimeout(timeout: number): void
    }

    class NodeHttpClient {
        +request(method: HttpMethod, path: string, data?: any, config?: RequestConfig): Promise<Response>
        +stream(path: string, data: any, config?: RequestConfig): AsyncIterable<any>
        +setBaseUrl(url: string): void
        +setDefaultHeaders(headers: Record<string, string>): void
        +setTimeout(timeout: number): void
    }

    class BrowserHttpClient {
        +request(method: HttpMethod, path: string, data?: any, config?: RequestConfig): Promise<Response>
        +stream(path: string, data: any, config?: RequestConfig): AsyncIterable<any>
        +setBaseUrl(url: string): void
        +setDefaultHeaders(headers: Record<string, string>): void
        +setTimeout(timeout: number): void
    }

    class RequestHandler {
        -client: HttpClient
        -errorHandler: ErrorHandler
        +send(request: Request): Promise<Response>
        +sendStream(request: Request): AsyncIterable<any>
        +buildRequest(endpoint: EndpointDefinition, params: any): Request
        +parseResponse(response: any, schema: Schema): any
    }

    class ErrorHandler {
        +handleRequestError(error: any): VeniceError
        +handleValidationError(error: any): VeniceValidationError
        +handleNetworkError(error: any): VeniceNetworkError
        +shouldRetry(error: any): boolean
    }

    class CLI {
        -sdk: VeniceAI
        -program: Command
        -configManager: ConfigManager
        +constructor()
        +run(args: string[]): Promise<void>
        +registerCommand(name: string, description: string, handler: Function): void
        -buildCommandsFromRegistry(): void
    }

    class ConfigManager {
        +getApiKey(profile?: string): Promise<string|null>
        +setApiKey(key: string, profile?: string): Promise<void>
        +listKeys(): Promise<Record<string, string>>
        +removeKey(profile: string): Promise<void>
        +getConfig(): Promise<Record<string, any>>
        +setConfig(key: string, value: any): Promise<void>
    }

    class BaseCommand {
        <<abstract>>
        #sdk: VeniceAI
        #configManager: ConfigManager
        +constructor(sdk: VeniceAI, configManager: ConfigManager)
        +execute(options: Record<string, any>): Promise<void>
        #formatOutput(data: any, format: string): string
    }

    class ChatCommand {
        +execute(prompt: string, options: ChatOptions): Promise<void>
    }

    class ListModelsCommand {
        +execute(options: ListModelsOptions): Promise<void>
    }

    class ListKeysCommand {
        +execute(options: ListKeysOptions): Promise<void>
    }
    
    class GenerateImageCommand {
        +execute(prompt: string, options: GenerateImageOptions): Promise<void>
    }
    
    class VersionManager {
        +getCurrentVersion(): string
        +getEndpointVersion(name: string): string
        +setEndpointVersion(name: string, version: string): void
        +getDeprecatedEndpoints(): string[]
    }

    VeniceAI o-- VeniceAIConfig
    VeniceAI o-- HttpClient
    VeniceAI o-- EndpointRegistry
    VeniceAI *-- ChatAPI
    VeniceAI *-- ModelsAPI
    VeniceAI *-- KeysAPI
    VeniceAI *-- ImagesAPI
    
    EndpointRegistry -- "*" EndpointDefinition
    EndpointRegistry -- "*" Endpoint
    EndpointRegistry --> HttpClient
    
    AbstractAPI <|-- ChatAPI
    AbstractAPI <|-- ModelsAPI
    AbstractAPI <|-- KeysAPI
    AbstractAPI <|-- ImagesAPI
    
    ChatAPI *-- ChatCompletionsAPI
    
    HttpClient <|.. NodeHttpClient
    HttpClient <|.. BrowserHttpClient
    
    RequestHandler --> HttpClient
    RequestHandler --> ErrorHandler
    
    Endpoint --> RequestHandler
    
    CLI o-- VeniceAI
    CLI o-- ConfigManager
    CLI o-- VersionManager
    CLI *-- "*" BaseCommand
    
    BaseCommand <|-- ChatCommand
    BaseCommand <|-- ListModelsCommand
    BaseCommand <|-- ListKeysCommand
    BaseCommand <|-- GenerateImageCommand